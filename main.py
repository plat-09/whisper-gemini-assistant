# –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
import sounddevice as sd               # –î–ª—è –∑–∞–ø–∏—Å–∏ –∑–≤—É–∫–∞ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
import numpy as np                     # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—Å—Å–∏–≤–∞–º–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ sounddevice)
import whisper                         # –ú–æ–¥–µ–ª—å –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –æ—Ç OpenAI
import tempfile                        # –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
from scipy.io.wavfile import write    # –î–ª—è –∑–∞–ø–∏—Å–∏ WAV-—Ñ–∞–π–ª–æ–≤ –∏–∑ numpy-–º–∞—Å—Å–∏–≤–∞
import google.generativeai as genai   # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Gemini API –æ—Ç Google
import os                             # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv        # –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env —Ñ–∞–π–ª–∞
from config import AUDIO_INPUT_DEVICE, AUDIO_DURATION, WHISPER_LANGUAGE # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ config.py


# –ó–∞–≥—Ä—É–∂–∞–µ–º API-–∫–ª—é—á –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()
api_key = os.getenv("GEMINI_API_KEY")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ Gemini API
genai.configure(api_key=api_key)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å Gemini (–º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ª—é–±—É—é –ø–æ–¥—Ö–æ–¥—è—â—É—é –∏–∑ list_models)
model = genai.GenerativeModel("models/gemini-1.5-flash")

# –°–æ–∑–¥–∞—ë–º —á–∞—Ç-—Å–µ—Å—Å–∏—é (–º–æ–∂–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
chat = model.start_chat()

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å Whisper –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
# –í–º–µ—Å—Ç–æ "medium" –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å "base", "small", "large" (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Å–∫–æ—Ä–æ—Å—Ç–∏)
whisper_model = whisper.load_model("medium")

def record_audio(duration=AUDIO_DURATION, fs=44100):
    """
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–µ–∫—É–Ω–¥.
    duration ‚Äî –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
    fs ‚Äî —á–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏ (–æ–±—ã—á–Ω–æ 44100 –ì—Ü)
    """
    print("üéôÔ∏è –ó–∞–ø–∏—Å—å...")
    sd.default.device = (AUDIO_INPUT_DEVICE, None)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –∑–∞–ø–∏—Å–∏ (–Ω–æ–º–µ—Ä –º–æ–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å —á–µ—Ä–µ–∑ sd.query_devices())
    recording = sd.rec(int(duration * fs), samplerate=fs, channels=1)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–≤—É–∫ (–º–æ–Ω–æ)
    sd.wait()  # –ñ–¥—ë–º –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
    print("‚úÖ –ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    return recording, fs

def transcribe_audio(audio_data, fs):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã–µ –≤ —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é Whisper.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π WAV-—Ñ–∞–π–ª, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –º–æ–¥–µ–ª—å –∏ —É–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª.
    """
    print("üîé –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ...")
    with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as tmpfile:
        write(tmpfile.name, fs, audio_data)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        result = whisper_model.transcribe(tmpfile.name, language=WHISPER_LANGUAGE)  # –†–∞—Å–ø–æ–∑–Ω–∞—ë–º —Ä–µ—á—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º
        os.unlink(tmpfile.name)  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    print("üó£Ô∏è –¢–µ–∫—Å—Ç:", result["text"])
    return result["text"]

def ask_gemini(prompt):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ Gemini –∏ –≤—ã–≤–æ–¥–∏—Ç –æ—Ç–≤–µ—Ç.
    """
    response = chat.send_message(prompt)
    print("ü§ñ Gemini:\n", response.text)
    return response.text

# –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    audio, fs = record_audio()             # 1. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≥–æ–ª–æ—Å
    question = transcribe_audio(audio, fs) # 2. –†–∞—Å–ø–æ–∑–Ω–∞—ë–º —Ç–µ–∫—Å—Ç –∏–∑ –∞—É–¥–∏–æ
    if question.strip():                   # 3. –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –ø—É—Å—Ç–æ–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Gemini
        ask_gemini(question)
    else:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å.")